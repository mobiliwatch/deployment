upstream mobili_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  
  server unix:{{ dir }}/daphne.socket fail_timeout=0;
}

# Acme conf
upstream acmetool {
  server 127.0.0.1:402;
}

# From http-$ to https target
server {
  listen         80;
  server_name    {{ hostname }} www.{{ hostname }};

  # Support let's encrypt challenges
  location /.well-known/acme-challenge/ {
      proxy_pass http://acmetool;
      try_files $uri @forward_https;
  }
  location @forward_https {
      return 301 https://{{ hostname }}$request_uri;
  }
  location / {
      return 301 https://{{ hostname }}$request_uri;
  }



}

# From https-www to https target
server {
  listen         443;
  server_name    www.{{ hostname }};

  # Enable Acme
  include /etc/nginx/ssl.conf;
  ssl_certificate  /var/lib/acme/live/{{ hostname }}/fullchain;
  ssl_certificate_key  /var/lib/acme/live/{{ hostname }}/privkey;

  location /.well-known/acme-challenge/ {
    proxy_pass http://acmetool;
  }

  return 301 $scheme://{{ hostname }}$request_uri;
}

server {
  listen   443;
  server_name {{ hostname }};

  location /.well-known/acme-challenge/ {
    proxy_pass http://acmetool;
  }

  client_max_body_size 4G;

  access_log {{ dir }}/logs/nginx-access.log;
  error_log {{ dir }}/logs/nginx-error.log;

  # Enable Acme
  include /etc/nginx/ssl.conf;
  ssl_certificate  /var/lib/acme/live/{{ hostname }}/fullchain;
  ssl_certificate_key  /var/lib/acme/live/{{ hostname }}/privkey;

  # Enable compression
  include /etc/nginx/gzip.conf;

  location / {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://mobili_server;
      break;
    }
  }

  location /static/ {
    alias   {{ dir }}/data/static/;

    expires 5d;
    add_header Pragma public;
    add_header Cache-Control "public";
  }

  location /medias/ {
    alias   {{ dir }}/data/medias/;

    expires 5d;
    add_header Pragma public;
    add_header Cache-Control "public";
  }

}
